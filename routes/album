// modules
const express = require("express");
// init
const router = express.Router();
// db
const { db } = require("../fb");
const AlbumsRef = db.collection("albums");
// joi validation
const { validateAlbum } = require("../models/album.js")

router.get("/", async (req, res) => {
    try {
        let totalAlbums = await AlbumsRef.get();

        let allAlbums = [];

        totalAlbums.forEach(doc => {
            let album = doc.data();
            album.id = doc.id;
            allAlbums.push(album)
        });

        return res.status(200).json({ albums: allAlbums });
    } catch (err) {
        console.log(err);
        res.status(404).json({ "error": err });
    };
});

router.get("/:id", async (req, res) => {
    try {
        let id = req.params.id

        let album = await AlbumsRef.doc(id).get();
        let albumData = { id: album.id, ...album.data() };
        return res.status(200).json(albumData);
    } catch (err) {
        console.log(err);
        res.status(404).json({ "error": err });
    };
});


router.post("/", async (req, res) => {
    // Check if Album to be posted matches the joi schema
    let validation = validateAlbum(req.body);
    if (validation.error) {
        res.status(400).json({ "error": "Album validation error : " + validation.error });
        return;
    }

    try {
        resp = await AlbumsRef.add(req.body);
        // success
        res.status(201).json({ id: resp.id });
    } catch (err) {
        res.status(400).json({ "error": "Cannot post Album : " + err });
    }
});

router.put("/fav/:id", async (req, res) => {
    try {
        let id = req.params.id
        let fav = req.body.c;
        if (fav != 1 && fav != -1) {
            return res.status(400).json({ "error": "Error adding fav sum" });
        }
        let album = await AlbumsRef.doc(id).get()
            .then(doc => {
                if (doc.exists) {

                    let albumdata = doc.data();
                    let newFav = albumdata?.favouritesNo > 0 ? albumdata?.favouritesNo + fav : 1;
                    AlbumsRef.doc(id).set({ favouritesNo: newFav }, { merge: true });
                    return res.status(201).json();
                }
                else {
                    return res.status(400).json({ "error": "Cannot update fav : " + err });
                }
            });
        // success
    } catch (err) {
        res.status(400).json({ "error": "Cannot update fav : " + err });
    }
});


module.exports = router;